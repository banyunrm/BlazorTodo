@page "/todos"
@using BlazorTodo.WebUI2.Data
@using Microsoft.EntityFrameworkCore
@using MudBlazor
@inject AppDbContext Database

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-6">
    <MudPaper Class="pa-4">
        <h1 class="mb-4">Todos List</h1>
        
        <a href="todos/create" class="mud-button mud-button-filled mud-button-filled-success mb-3 text-white text-decoration-none px-3 py-2 rounded">
            Add Todo
        </a>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
        }
        else if (todos == null)
        {
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
        }
        else if (!todos.Any())
        {
            <MudText>No todos found.</MudText>
        }
        else
        {
            <MudTable Items="todos" Hover="true" Dense="true" Striped="true" Bordered="true"
                      Filter="new Func<Todo,bool>(FilterFunc)" Class="mt-3">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Todo List</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchString"
                                  Placeholder="Search todos..."
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Medium"
                                  Class="mt-0 w-50" />
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Title</MudTh>
                    <MudTh>Description</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Title">@context.Title</MudTd>
                    <MudTd DataLabel="Description">@context.Description</MudTd>
                    <MudTd DataLabel="Status">
                        @if (context.IsDone)
                        {
                            <MudChip T="string" Color="Color.Success" Variant="Variant.Filled">Done</MudChip>
                        }
                        else
                        {
                            <MudChip T="string" Color="Color.Warning" Variant="Variant.Filled">Pending</MudChip>
                        }
                    </MudTd>
                    <MudTd>
                        <a href="/todos/details/@context.Id" class="mud-button mud-button-filled mud-button-filled-success btn-sm text-white me-1">Details</a>
                        <a href="/todos/edit/@context.Id" class="mud-button mud-button-filled mud-button-filled-warning btn-sm text-white me-1">Edit</a>
                        <a href="/todos/delete/@context.Id" class="mud-button mud-button-filled mud-button-filled-error btn-sm text-white">Delete</a>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        }
    </MudPaper>
</MudContainer>

@code {
    private List<Todo>? todos;
    private string errorMessage = string.Empty;
    private string searchString = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadTodos();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadTodos();
    }

    private async Task LoadTodos()
    {
        try
        {
            errorMessage = string.Empty;
            todos = await Database.Todos.ToListAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading todos: {ex.Message}";
            Console.WriteLine(errorMessage);
            todos = new List<Todo>();
        }
    }

    private bool FilterFunc(Todo todo)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (todo.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrEmpty(todo.Description) &&
            todo.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}
