@page "/countries"

<h2>Countries List</h2>

<a href="countries/create" class="mud-button mud-button-filled mud-button-filled-success mb-3 text-white text-decoration-none px-3 py-2 rounded">
    Add Country
</a>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
}
else if (countries == null)
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
}
else if (!countries.Any())
{
    <MudText>No countries found.</MudText>
}
else
{
    <MudTable Items="@countries" Hover="true" Dense="true" Bordered="true" Striped="true">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Country List</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          Class="mt-0" />
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Code</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Code">@context.Code</MudTd>
            <MudTd>
                <a href="/countries/details/@context.Id" class="mud-button mud-button-filled mud-button-filled-success btn-sm text-white me-1">Details</a>
                <a href="/countries/edit/@context.Id" class="mud-button mud-button-filled mud-button-filled-warning btn-sm text-white me-1">Edit</a>
                <a href="/countries/delete/@context.Id" class="mud-button mud-button-filled mud-button-filled-error btn-sm text-white">Delete</a>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}

@code {
    private List<Country>? countries;
    private string errorMessage = string.Empty;
    private string searchString = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadCountries();
    }

    private async Task LoadCountries()
    {
        try
        {
            errorMessage = string.Empty;
            countries = await Database.Countries.ToListAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading countries: {ex.Message}";
            Console.WriteLine(errorMessage);
            countries = new List<Country>();
        }
    }
}
